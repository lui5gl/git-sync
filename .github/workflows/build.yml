name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (e.g. v3.0.0) to build and publish"
        required: false

jobs:
  prepare:
    name: Resolve release ref
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.ref.outputs.ref }}
    steps:
    - name: Determine ref
      id: ref
      env:
        RELEASE_TAG: ${{ github.event.release.tag_name }}
        DISPATCH_TAG: ${{ github.event.inputs.tag }}
        REF_NAME: ${{ github.ref_name }}
      run: |
        ref="${RELEASE_TAG:-${DISPATCH_TAG:-${REF_NAME}}}"
        echo "ref=$ref" >> "$GITHUB_OUTPUT"

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: prepare
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: git-sync
            asset_name: git-sync-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: git-sync
            asset_name: git-sync-linux-amd64-musl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare.outputs.ref }}

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}

    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package artifact
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} dist/${{ matrix.asset_name }}
        tar -czf dist/${{ matrix.asset_name }}.tar.gz -C dist ${{ matrix.asset_name }}
        rm dist/${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.asset_name }}.tar.gz

  release:
    name: Create Release
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.ref != '' && startsWith(needs.prepare.outputs.ref, 'v') }}
    
    permissions:
      contents: write
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List downloaded artifacts
      run: ls -R artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*.tar.gz
        draft: ${{ github.event_name == 'release' && github.event.release.draft }}
        prerelease: ${{ github.event_name == 'release' && github.event.release.prerelease }}
        tag_name: ${{ needs.prepare.outputs.ref }}
        name: ${{ (github.event_name == 'release' && github.event.release.name) || needs.prepare.outputs.ref }}
        overwrite: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
